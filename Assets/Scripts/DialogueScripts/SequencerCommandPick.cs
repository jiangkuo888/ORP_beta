



using UnityEngine;
using System.Collections;
using PixelCrushers.DialogueSystem;
using PixelCrushers.DialogueSystem.SequencerCommands;

public class SequencerCommandPick : SequencerCommand {
	
	private GameObject actor;
	private GameObject onUsedObj;
	
	public void Start() {
		// Add your initialization code here. You can use the GetParameter***() and GetSubject()
		// functions to get information from the command's parameters. You can also use the
		// Sequencer property to access the SequencerCamera, CameraAngle, and other properties
		// on the sequencer.
		if(PlayerPrefs.GetString("LocalActor") != null)
			actor = GameObject.Find(PlayerPrefs.GetString("LocalActor"));
		
		if(PlayerPrefs.GetString("OnUsedObj") != null)
			onUsedObj = GameObject.Find (PlayerPrefs.GetString("OnUsedObj"));
		
	}
	
	public void Update() {
		
		
		//set lock to false so others can interact with this object
		//transform.GetComponent<DetectObjects>().photonView.RPC("setInteractLock",PhotonTargets.AllBuffered, false);
		
		//delete the useless script generated by dunilog
		
		if(GetParameter(0) == "open")
		{
			if(onUsedObj.GetComponent<Animation>())
			{
				
				onUsedObj.animation.Play("Keybox_Open");


				GameObject.Find ("AudioManager").GetComponent<AudioManager>().Play(GameObject.Find ("AudioManager").GetComponent<AudioManager>().Audioclips[16]);

				Stop ();
				//				print(onUsedObj.name + " animation");
			}
			
			
			
		}
		else if(GetParameter(0) == "close")
		{
			if(onUsedObj.GetComponent<Animation>())
				onUsedObj.animation.Play("Keybox_Close");
				
				GameObject.Find ("AudioManager").GetComponent<AudioManager>().Play(GameObject.Find ("AudioManager").GetComponent<AudioManager>().Audioclips[16]);
				
			Stop ();
			
		}
		else if(GetParameter(0)=="key")
		{
			// check if the inventory is full
			GameObject playersinv = GameObject.Find ("Inventory").gameObject;
			
			
			GameObject Child = null;
			foreach (Transform Tr in onUsedObj.transform)
			{
				
				if (Tr.name.Contains("Keys"))
					Child = Tr.gameObject;
			}
			
			if(Child == null)
				Debug.Log("No keys gameObject in the prefab.");
			
			
			
			if (playersinv.GetComponent<InventoryNew>().Contents.Length < playersinv.GetComponent<InventoryNew>().MaxContent)
			{
				
				
				if(playersinv.GetComponent<InventoryNew>().alreadyHave(Child.transform) == false)
				{
					DialogueLua.SetVariable("HasKey",false);
					//moveToPlayerPosition(Child.name);
					disableRender(Child.name);
					disableCollider(Child.name);
					disableRigidbody(Child.name);
					enableInventory(Child);
				}

				GameObject.Find ("AudioManager").GetComponent<AudioManager>().Play(GameObject.Find ("AudioManager").GetComponent<AudioManager>().Audioclips[15]);
				Stop ();
				
			}
			
			
			
			
		}
		else{
			
			
			GameObject playersinv = GameObject.Find ("Inventory").gameObject;


			if (playersinv.GetComponent<InventoryNew>().isFull == false )
			{
				

				
				if(!playersinv.GetComponent<InventoryNew>().alreadyHave(onUsedObj.transform))
				{

					if(GameObject.Find ("DropArea_"+onUsedObj.name))
					{
						GameObject.Find ("DropArea_"+onUsedObj.name).GetComponent<DropAreaController>().AreaActivated = true;
						print ("111");
					}

					if(onUsedObj.GetComponent<PhotonView>() != null)
					{

					PhotonView photonView = onUsedObj.GetPhotonView();


					photonView.RPC("disableRenderer",PhotonTargets.AllBuffered);
					photonView.RPC("disableCollider",PhotonTargets.AllBuffered);
					photonView.RPC("disableRigidbody",PhotonTargets.AllBuffered);
					
					if(onUsedObj.name == "ObstacleBox")
					{
						PhotonView photonView2 = GameObject.Find("EmergencyExit").GetPhotonView();
						photonView2.RPC ("notBlockingAnymore",PhotonTargets.AllBuffered);
					}
					}

					moveToPlayerPosition(onUsedObj.name);
					disableRender(onUsedObj.name);
					disableCollider(onUsedObj.name);
					disableRigidbody(onUsedObj.name);
					enableInventory(onUsedObj);

					print ("222");


				

				}



			}
			else{

				print ("Inventory is full.");

			}
			
			
		}
		
		// Add your update code here. When the command is done, call Stop().
		//Stop ();
	}
	
	
	
	
	public void OnDestroy() {
		// Add your finalization code here. This is critical. If the sequence is cancelled and this
		// command is marked as "required", then only Start() and OnDestroy() will be called.
		
	}
	
	void moveToPlayerPosition(string objName){
		
		GameObject obj  = GameObject.Find (objName);
		
		Vector3 originalScale = obj.transform.lossyScale;
		
		//print (actor.name);
		
		
		obj.transform.parent = actor.transform;
		obj.transform.localPosition = Vector3.zero;
		obj.transform.localScale = originalScale;

		
	}
	
	GameObject findGrabObjWithTag( Transform parent){
		
		if (parent.tag == "pickable")
			return parent.gameObject;
		else foreach (Transform child in parent){
			if(child.gameObject.tag == "pickable"){
				print (child.gameObject.name);
				return child.gameObject;
			}
		}
		
		return null;
		
	}
	
	
	
	void disableCollider(string objName){
		
		GameObject obj  = GameObject.Find (objName);
		Collider[] colliders = obj.GetComponentsInChildren<Collider>();
		
		foreach ( Collider c in colliders)
		{
			if(c.enabled == true)
				c.enabled = false;
		}
		
	}
	
	
	void disableRender(string objName)
	{
		
		GameObject obj  = GameObject.Find (objName);
		Renderer[] renderers = obj.GetComponentsInChildren<Renderer>();
		
		foreach ( Renderer r in renderers)
		{
			if(r.enabled == true)
				r.enabled = false;
		}
	}
	
	
	void disableRigidbody(string objName)
	{
		
		GameObject obj  = GameObject.Find (objName);
		if (obj.GetComponent<Rigidbody>()!=null)
			Destroy(obj.GetComponent<Rigidbody>());
	}
	void enableInventory(GameObject obj){
		
		
		// add this obj into the inventory list
		GameObject.Find ("Inventory").GetComponent<InventoryNew>().AddItem(obj.transform);

		GameObject.Find ("Inventory").GetComponent<InventoryDisplayCSharp>().Open ();
		
		
		
		//GameObject.Find ("InventoryObj").GetComponent<inventory>().updateInventoryObject(obj);
		
		DialogueLua.SetVariable("InventoryHasObject",true);
		
	}
	
}



/**/